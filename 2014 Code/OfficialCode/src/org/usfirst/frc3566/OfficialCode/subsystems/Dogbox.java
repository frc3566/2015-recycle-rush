// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3566.OfficialCode.subsystems;
import org.usfirst.frc3566.OfficialCode.RobotMap;
import org.usfirst.frc3566.OfficialCode.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3566.OfficialCode.RobotConstants;
/**
 *
 */
public class Dogbox extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput engagedLimit = RobotMap.dogboxEngagedLimit;
    SpeedController clutch = RobotMap.dogboxClutch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // assume dogbox always starts engaged (as in autonomous it must!)
    private boolean engaged = true;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public boolean atLimit() {
        return engagedLimit.get() == RobotConstants.DOGBOX_ENGAGE_LIMIT_CLOSED;
    }
    
    public void disengage() {
        if (engaged) {
            clutch.set(RobotConstants.DOGBOX_DISENGAGE_SPEED);
        }
    }
    
    public void engage() {
        if (!engaged) {
            clutch.set(RobotConstants.DOGBOX_ENGAGE_SPEED);
        }
    }
    
    public void setEngaged() {
        engaged = true;
    }
    
    public void setDisengaged() {
        engaged = false;
    }
    
    public boolean isEngaged() {
        return engaged;
    }
    
    public boolean isDisengaged() {
        return !engaged;
    }
    
    public void stop() {
        clutch.set(0);
    }
        
    public void monitor() {
        SmartDashboard.putData("Dogbox Engaged", engagedLimit);
    }
}

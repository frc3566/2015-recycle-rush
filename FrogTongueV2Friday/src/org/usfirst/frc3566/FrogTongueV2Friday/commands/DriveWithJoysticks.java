// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.FrogTongueV2Friday.commands;

import edu.wpi.first.wpilibj.command.Command;

import java.math.*;

import org.usfirst.frc3566.FrogTongueV2Friday.Robot;
import org.usfirst.frc3566.FrogTongueV2Friday.RobotMap;

/**
 *
 */
public class  DriveWithJoysticks extends Command {
    public double leftSpeed,rightSpeed;
    public boolean leftDirection,rightDirection;
    public DriveWithJoysticks() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	leftDirection=true;
    	rightDirection=true;
    	leftSpeed=0;
    	rightSpeed=0;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	leftDirection=Robot.oi.getLogitech().getRawAxis(1)>0;
    	rightDirection=Robot.oi.getLogitech().getRawAxis(3)>0;
    	leftSpeed=Math.pow(1.65, Math.abs(Robot.oi.getLogitech().getRawAxis(1)))-1;
    	rightSpeed=Math.pow(1.65, Math.abs(Robot.oi.getLogitech().getRawAxis(3)))-1;
    	if (!leftDirection){
    		leftSpeed=leftSpeed*(-1);
    	}
    	if (!rightDirection){
    		rightSpeed=rightSpeed*(-1);
    	}
    	RobotMap.driveTrainRobotDrive23.tankDrive((-1)*leftSpeed, (-1)*rightSpeed);
    	System.out.println(Robot.oi.ardSP.getBytesReceived());
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

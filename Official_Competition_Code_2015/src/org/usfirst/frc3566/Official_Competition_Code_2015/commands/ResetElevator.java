// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.Official_Competition_Code_2015.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3566.Official_Competition_Code_2015.Robot;

/**
 *
 */
public class  ResetElevator extends Command {
	private boolean isRaising;
	private final double tolerance = 0.01;
	
    public ResetElevator() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	if (Math.abs(Robot.elevator.getPositionPotentiometer() - Robot.elevator.elevatorZeroPosition) < tolerance) {
    		end();
    	} else {
    		if (Robot.elevator.getPositionPotentiometer() > Robot.elevator.elevatorZeroPosition) {
    			isRaising = false;
    			Robot.elevator.lowerElevator();
    		} else {
    			isRaising = true;
    			Robot.elevator.raiseElevator();
    		}
    	}
    	setTimeout(5);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return ((isRaising && Robot.elevator.getPositionPotentiometer() > Robot.elevator.elevatorZeroPosition) ||
    			(!isRaising && Robot.elevator.getPositionPotentiometer() < Robot.elevator.elevatorZeroPosition));
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.elevator.stopElevator();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}

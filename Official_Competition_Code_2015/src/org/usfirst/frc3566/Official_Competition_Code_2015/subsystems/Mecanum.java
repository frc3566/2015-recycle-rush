// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.Official_Competition_Code_2015.subsystems;

import org.usfirst.frc3566.Official_Competition_Code_2015.Robot;
import org.usfirst.frc3566.Official_Competition_Code_2015.RobotConstants;
import org.usfirst.frc3566.Official_Competition_Code_2015.RobotMap;
import org.usfirst.frc3566.Official_Competition_Code_2015.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Mecanum extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Mecanum_Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    /**
     * This function drives the robot with 4 wheels mecanum drivetrain
     * @param runSpeedCoefficient Run speed coefficient
     * @param turnSpeedCoefficient Turn speed coefficient
     */
    public void Drive(double runSpeedCoefficient, double turnSpeedCoefficient){
    	/*
    	 * Set lower limit of controller input
    	 */
    	double x;
    	if (Math.abs(Robot.oi.xBoxController.getRawAxis(0))>0.15){
    		x = (-1)*runSpeedCoefficient*Robot.oi.xBoxController.getRawAxis(0);
    	} else {
    		x = 0;
    	}
    	double y;
    	if (Math.abs(Robot.oi.xBoxController.getRawAxis(1))>0.15){
    		y = runSpeedCoefficient*Robot.oi.xBoxController.getRawAxis(1);
    	} else {
    		y = 0;
    	}
    	double rot;
    	if (Math.abs(Robot.oi.xBoxController.getRawAxis(4))>0.15){
    		rot = (-1)*turnSpeedCoefficient*Robot.oi.xBoxController.getRawAxis(4);
    	} else {
    		rot = 0;
    	}
        /*
         * Exponential speed control
         */
    	boolean xd=false;
    	xd=x>0;
    	boolean yd=false;
    	yd=y>0;
    	boolean rotd=false;
    	rotd=rot>0;
    	double xSpeed=0;
    	double ySpeed=0;
    	double rotSpeed=0;
    	xSpeed=Math.pow(1+RobotConstants.Robot_Mecanum_RunSpeed_Coefficient, Math.abs(x))-1;
    	ySpeed=Math.pow(1+RobotConstants.Robot_Mecanum_RunSpeed_Coefficient, Math.abs(y))-1;
    	rotSpeed=Math.pow(1+RobotConstants.Robot_Mecanum_TurnSpeed_Coefficient, Math.abs(rot))-1;
    	if (!xd){
    		xSpeed=xSpeed*(-1);
    	}
    	if (!yd){
    		ySpeed=ySpeed*(-1);
    	}
    	if (!rotd){
    		rotSpeed=rotSpeed*(-1);
    	}
    	RobotMap.mecanumMecanum_Control.mecanumDrive_Cartesian(xSpeed, ySpeed, rotSpeed, 0);
    }
}


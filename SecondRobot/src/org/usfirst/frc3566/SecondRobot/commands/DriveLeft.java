// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.SecondRobot.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3566.*;
import org.usfirst.frc3566.SecondRobot.Robot;
import org.usfirst.frc3566.SecondRobot.RobotMap;

/**
 *
 */
public class  DriveLeft extends Command {
	double count;
	boolean shouldCount;
	double initialAngle;
	double currentAngle;
    double diffAngle;
    public DriveLeft() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	shouldCount=true;
    	count=0;
    	this.setTimeout(6);
    	initialAngle = Robot.driveTrain.getGyro().getAngle();
    	//RobotMap.driveTrainMecanum.mecanumDrive_Cartesian(0.20, 0, 0, Robot.driveTrain.getGyro().getAngle());
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if ((Robot.driveTrain.getDistance()<=100)&&(shouldCount)){
    		count=count+1;
    		shouldCount=false;
    	}
    	if (Robot.driveTrain.getDistance()>100){
    		shouldCount=true;
    	}
    	currentAngle = Robot.driveTrain.getGyro().getAngle();
    	diffAngle = initialAngle-currentAngle;
    	RobotMap.driveTrainMecanum.mecanumDrive_Polar(0.40, 85.8, (diffAngle*0.015));
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return this.isTimedOut()||((Robot.driveTrain.getDistance()<=100)&&(count==2));
    }

    // Called once after isFinished returns true
    protected void end() {
    	RobotMap.driveTrainMecanum.mecanumDrive_Polar(0, 0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.SecondRobot.subsystems;

import org.usfirst.frc3566.SecondRobot.RobotConstants;
import org.usfirst.frc3566.SecondRobot.Robot;
import org.usfirst.frc3566.SecondRobot.RobotMap;
import org.usfirst.frc3566.SecondRobot.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {
	boolean controlStatus = true;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController talon1 = RobotMap.driveTrainTalon1;
    SpeedController talon2 = RobotMap.driveTrainTalon2;
    SpeedController talon3 = RobotMap.driveTrainTalon3;
    SpeedController talon4 = RobotMap.driveTrainTalon4;
    RobotDrive mecanum = RobotMap.driveTrainMecanum;
    AnalogInput ultrasonic = RobotMap.driveTrainUltrasonic;
    Gyro gyro = RobotMap.driveTrainGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
 
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new MecanumDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void Drive(){
    	double x;
    	double y;
    	double rot;
    	boolean xd=false;
    	boolean yd=false;
    	boolean rotd=false;
    	double xSpeed=0;
        double ySpeed=0;
        double rotSpeed=0;
        	if (Math.abs(Robot.oi.Xbox.getRawAxis(0))>0.15){
        		x = RobotConstants.Robot_Mecanum_RunSpeed_Coefficient*Robot.oi.Xbox.getRawAxis(0);
        	} else {
        		x = 0;
        	}
        	
        	if (Math.abs(Robot.oi.Xbox.getRawAxis(1))>0.15){
        		y = RobotConstants.Robot_Mecanum_RunSpeed_Coefficient*Robot.oi.Xbox.getRawAxis(1);
        	} else {
        		y = 0;
        	}
        	
        	if (Math.abs(Robot.oi.Xbox.getRawAxis(4))>0.15){
        		rot = RobotConstants.Robot_Mecanum_TurnSpeed_Coefficient*Robot.oi.Xbox.getRawAxis(4);
        	} else {
        		rot = 0;
        	}
            /*
             * Exponential speed control
             */
        	
        	xd=x>0;
        	
        	yd=y>0;
        	
        	rotd=rot>0;
        	
        	xSpeed=Math.pow(1+RobotConstants.Robot_Mecanum_RunSpeed_Coefficient, Math.abs(x))-1;
        	ySpeed=Math.pow(1+RobotConstants.Robot_Mecanum_RunSpeed_Coefficient, Math.abs(y))-1;
        	rotSpeed=Math.pow(1+RobotConstants.Robot_Mecanum_TurnSpeed_Coefficient, Math.abs(rot))-1;
        	if (!xd){
        		xSpeed=xSpeed*(-1);
        	}
        	if (!yd){
        		ySpeed=ySpeed*(-1);
        	}
        	if (!rotd){
        		rotSpeed=rotSpeed*(-1);
        	}
        	mecanum.mecanumDrive_Cartesian(xSpeed, ySpeed, rotSpeed, 0);
    }
    
    public void SecondaryDrive(){
    	double xSpeed=0;
        double ySpeed=0;
        double rotSpeed=0;

    	xSpeed=RobotConstants.Robot_Mecanum_CreepRun_Coefficient*Robot.oi.Logitech.getRawAxis(0);
    	ySpeed=RobotConstants.Robot_Mecanum_CreepRun_Coefficient*Robot.oi.Logitech.getRawAxis(1);
    	rotSpeed=RobotConstants.Robot_Mecanum_CreepTurn_Coefficient*Robot.oi.Logitech.getRawAxis(2);
    	mecanum.mecanumDrive_Cartesian(xSpeed, ySpeed, rotSpeed, 0);
    }
    public void switchStatus(){
    	controlStatus=!controlStatus;
    }
    public boolean getStatus(){
    	return controlStatus;
    }
    public Gyro getGyro(){
    	return gyro;
    }
    public double getDistance(){
    	return ultrasonic.getAverageValue();
    }
}

